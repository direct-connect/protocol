= ADC Recommendations
Fredrik Ullner <ullner@gmail.com>
1.0.0, July 2010

== Abstract
These are the official recommendations to ADC. This document is based on the information contained in the ADC documents, ADC wiki and ADC blog. Information is this document should be taken as guide lines to implementations.

== Version history
The latest draft of the next version of this document as well as intermediate
and older versions can be downloaded from
$URL: https://adc.svn.sourceforge.net/svnroot/adc/trunk/ADC-Recommendation.txt $.

This version corresponds to $Revision: 1 $.

=== Version 1.0.0
* Initialize release

== General recommentations

Message length
Messages can be constructed to be long or short with varying complexity. All messages that contain a positional parameter can also contain additional named parameters. This mean that implementations must be able to read enough data to accuratley be aware of additional data. This also means that it may be in the implementations' interest to stop processing after an excessive amount of data, but implementations should strive to be as resiliant as possible. Certain messages that require parsing of specific parts, their context and content (e.g. regular expressions) may very well be short but nontheless pose a security issue if not dealt with appropriately.

== STA recommendations
Clients should display text messages appropriately depending on context, severity and error code. It is recommended to display the error message regardless of the error code. Hubs must not depend on where clients display error codes.

While STA messages require a severity to accompany the error code, the severity may not be of importance to some error codes or are simply implied by the actual error code. However, it is important that the severity is sent as appropriate and is accurate. STA messages with 0 (success) for severity can usually be regarded by implementations that the information require little or no counter-action.
The following list include error codes that make no or little sense in one or many severities, and a description why they are best used in one or only some severities. The descriptive text for the error codes can be seen in the STA specification, but may be re-stated as part of the description why they can have severity restriction(s).

11 | If the hub is full, it makes little sense in keeping the client in some "connected" state. The recommended severity is to use 2 (fatal) to force the client to reconnect at a later time.
12 | Similar to error code 11.
21 | While potentially fatal, the client may resend its INF with a new NI field. The recommended severity for hubs is to use 2 (fatal) but they can use 1 (recoverable).
22 | Similar to error code 21.
23 | An invalid password depend on whether the hub wish to allow the client to resend its password (say, if the transmission became garbled). However, the recommended severity is to use 2 (fatal) unless under special circumstances, for some clients or for some users.
24 | The recommended severity is to use 2 (fatal).
25 | Can be 1 (recoverable) or 2 (fatal) but generally not 0 (sucess).
26 | If the user is not registered in the hub, it makes little sense to try to reconnect immediately. The recommended severity is to use 2 (fatal).
27 | Similar to error code 24.
30 | The recommended severity is to use 2 (fatal).
31 | Must be 2 (fatal).
32 | Must be 2 (fatal).
43 | Information that is missing or is bad is generally grounds for a disconnect but may be recoverable under certain states. The recommended severity is to use 2 (fatal).
44 | Similar to error code 43.
45 | Similar to error code 43.
46 | Similar to error code 43.
47 | Must be 2 (fatal).
50 | May be cause for a disconnect but is generally recoverable. The recommended severity is to use 1 (recoverable).
51 | Similar to error code 50.
52 | Similar to error code 50.
53 | Similar to error code 11.
54 | Must be 2 (fatal).

== ZLIB compression

=== Generic

* Try to keep constant and almost constant named parameters together, that way there is a higher likelyhood for a longer parameter match.

* When possible try to keep similar commands no more than a window size (usually 32 bits if highest rate is used) away, that ensures you will benefit from the redundancy provided by these (this may be particularly important when sending large strings like MOTDs or help and configuration values intertwined with other commands).

* Syncing is important to keep the clients updated but when you sync some bytes are sent (the sync ones and the ones for the Huffman tree of the new packet if it is a type 2 packet) as such it may make sense to keep in different queues commands depending on how much latency matters for them, for example you may want to keep low latency for MSG commands and send them frequently but may prefer to send searches or passive results together each half second or so. Also latencies matter depending on the type of network, on a LAN users expect most things to happen almost inmediately (especially things like MSGs) whilst clients connecting over a classic DSL line may not care that much for higher latencies.

// vim: set syntax=asciidoc:
