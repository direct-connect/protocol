<?xml version="1.0" encoding="utf-8"?><adctestcases><tc Name="Too short random data" Expected="Client sends a STA indicating that the GPA is invalid and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a client does when it receives random data in the GPA that is too short (less than 24 bytes)" Command="GPA"><step Info="Connect with a client A to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server sends &quot;SID BBBB&quot;" /><step Info="The client B sends &quot;INF BBBB ...&quot;" /><step Info="The server sends &quot;GPA A&quot; (1 byte)" /></tc><tc Name="Invalid characters in random data" Expected="Client sends a STA indicating that the GPA is invalid and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a client does when it receives random data in the GPA that contain invalid characters (1 for instance)" Command="GPA"><step Info="Connect with a client A to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server sends &quot;SID BBBB&quot;" /><step Info="The client B sends &quot;INF BBBB ...&quot;" /><step Info="The server sends &quot;GPA AAAAAAAAAAAAAAAAAAAAAAA1&quot; (24 bytes)" /></tc><tc Name="Valid random data" Expected="" PostCondition="" PreCondition="" Purpose="" Command="GPA" /><tc Name="Empty GPA" Expected="" PostCondition="" PreCondition="" Purpose="" Command="GPA" /><tc Name="ID and PD fields present and matching" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="ID and PD fields present and mismatching" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Only ID field present" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Only PD field present" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Neither ID or PD fields present" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Invalid characters in ID field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Invalid characters in PD field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Invalid characters in NI field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Invalid characters in DE field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Invalid characters in I4 field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Invalid characters in I6 field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Invalid IP in I4 field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Invalid IP in I6 field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Wrong IP in I4 field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Wrong IP in I6 field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="DNS in I4 field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="DNS in I6 field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Zero address in I4 field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Zero address in I6 field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Correct address in I4 field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Correct address in I6 field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Too long FOURCC in SU field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Too short FOURCC in SU field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Invalid FOURCC in SU field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Invalid formatting of SU field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Empty INF" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Underflow fields SS, SF, US, DS, SL, AS, AM, HN, HR, HO, CT, AW" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Negative out-of-range value for fields SS, SF, US, DS, SL, AS, AM, HN, HR, HO, CT, AW" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="0 value for fields SS, SF, US, DS, SL, AS, AM, HN, HR, HO, CT, AW" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Overflow fields SS, SF, US, DS, SL, AS, AM, HN, HR, HO, CT, AW " Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Positive out-of-range value for fields SS, SF, US, DS, SL, AS, AM, HN, HR, HO, CT, AW" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="Invalid characters in fields SS, SF, US, DS, SL, AS, AM, HN, HR, HO, CT, AW" Expected="" PostCondition="" PreCondition="" Purpose="" Command="INF" /><tc Name="A basic MSG with no named parameters" Expected="The other client receives the message unmodified and display it appropriately" PostCondition="" PreCondition="" Purpose="Validate that the server forwards the message unmodified" Command="MSG"><step Info="Connect with a client A to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;. Continue with normal communication until NORMAL is reached and stabalized" /><step Info="Connect with a client B to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;. Continue with normal communication until NORMAL is reached and stabalized" /><step Info="Client A sends &quot;MSG example&quot;" /></tc><tc Name="A basic MSG with ME field" Expected="The other client receives the message unmodified and display it appropriately" PostCondition="" PreCondition="" Purpose="Validate that the server forwards the message unmodified" Command="MSG"><step Info="Connect with a client A to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;. Continue with normal communication until NORMAL is reached and stabalized" /><step Info="Connect with a client B to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;. Continue with normal communication until NORMAL is reached and stabalized" /><step Info="Client A sends &quot;MSG example ME1&quot;" /></tc><tc Name="A basic MSG with PM field" Expected="The other client receives the message unmodified and display it appropriately" PostCondition="" PreCondition="" Purpose="Validate that the server forwards the message unmodified" Command="MSG"><step Info="Connect with a client A to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;. Continue with normal communication until NORMAL is reached and stabalized" /><step Info="Connect with a client B to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;. Continue with normal communication until NORMAL is reached and stabalized" /><step Info="Client A sends &quot;MSG example PMAAAA&quot; (Client A's SID)" /></tc><tc Name="A basic MSG with ME and PM fields" Expected="The other client receives the message unmodified and display it appropriately" PostCondition="" PreCondition="" Purpose="Validate that the server forwards the message unmodified" Command="MSG"><step Info="Connect with a client A to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;. Continue with normal communication until NORMAL is reached and stabalized" /><step Info="Connect with a client B to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;. Continue with normal communication until NORMAL is reached and stabalized" /><step Info="Client A sends &quot;MSG example ME1 PMAAAA&quot; (Client A's SID)" /><step Info="Client A sends &quot;MSG example PMAAAA ME1&quot; (Client A's SID)" /></tc><tc Name="Negative out-of-bounds value in ME field" Expected="The other client does not receive the message" PostCondition="" PreCondition="" Purpose="Validate that the server does not forward the message" Command="MSG"><step Info="Connect with a client A to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;. Continue with normal communication until NORMAL is reached and stabalized" /><step Info="Connect with a client B to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;. Continue with normal communication until NORMAL is reached and stabalized" /><step Info="Client A sends &quot;MSG example ME-1&quot;" /></tc><tc Name="Underflow value in ME field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="0 Value in ME field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="Empty ME field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="Overflow value in ME field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="Postive out-of-bounds value in ME field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="Invalid characters in ME field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="Empty PM" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="Too short SID value in PM field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="Too long SID value in PM field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="Invalid characters SID value in PM field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="Non-existing SID value in PM field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="MSG in PROTOCOL state" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="MSG in IDENTIFY state" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="MSG in VERIFY state" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="MSG in NORMAL state" Expected="" PostCondition="" PreCondition="" Purpose="" Command="MSG" /><tc Name="Invalid response based on the GPA" Expected="Server sends a STA indicating that the PAS is invalid and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a server does when it receives a response that does not match the request." Command="PAS"><step Info="Connect with a client A to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server sends &quot;SID BBBB&quot;" /><step Info="The client B sends &quot;INF BBBB ...&quot;" /><step Info="The server sends &quot;GPA AAAAAAAAAAAAAAAAAAAAAAAA&quot; (24 bytes)" /><step Info="The client sends &quot;PAS BBBBBBBBBBBBBBBBBBBBBBBB&quot;" /></tc><tc Name="Invalid characters in response" Expected="Server sends a STA indicating that the PAS is invalid and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a server does when it receives a response that contain invalid characters (1 for instance)" Command="PAS"><step Info="Connect with a client A to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server sends &quot;SID BBBB&quot;" /><step Info="The client B sends &quot;INF BBBB ...&quot;" /><step Info="The server sends &quot;GPA AAAAAAAAAAAAAAAAAAAAAAAA&quot; (24 bytes)" /><step Info="The client sends &quot;PAS BBBBBBBBBBBBBBBBBBBBBBB1&quot; (last byte is invalid)" /></tc><tc Name="Valid response" Expected="" PostCondition="" PreCondition="" Purpose="" Command="PAS" /><tc Name="Empty PAS" Expected="" PostCondition="" PreCondition="" Purpose="" Command="PAS" /><tc Name="Too short SID" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Too long SID" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Invalid characters in SID" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="No client with the specified SID" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Too short ID field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Too long ID field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Invalid characters in ID field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="No client with the specified SID in the ID field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Negative out-of-bounds value in TL field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Underflow TL field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Overflow TL field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="-1 (forever) in TL field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="120 second value in TL field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Invalid characters in TL field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Empty TL field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="&quot;example&quot; in MS field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Empty MS field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Negative out-of-bounds value in DI field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Underflow DI field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Overflow DI field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="0 as value in DI field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="1 as value in DI field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Invalid characters in DI field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Empty DI field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Empty RD field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="QUI in PROTOCOL state" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="QUI in IDENTIFY state" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="QUI in VERIFY state" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="QUI in NORMAL state" Expected="" PostCondition="" PreCondition="" Purpose="" Command="QUI" /><tc Name="Underflow fields LE, GE, EQ, TY" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Negative out-of-range value for fields LE, GE, EQ, TY" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="0 value for fields LE, GE, EQ, TY" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Overflow fields LE, GE, EQ, TY" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Positive out-of-range value for TY" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Invalid characters in fields LE, GE, EQ, TY" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Combination of LE and EQ fields with conflicting values" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Combination of GE and EQ fields with conflicting values" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Combination of LE, GE and EQ fields with conflicting values" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Valid AN field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Valid NO field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Only NO field" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Combination of AN and NO fields with conflicting values" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Invalid characters in field EX" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Empty AN" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Empty NO" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Empty EX" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Empty LE" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Empty GE" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Empty EQ" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Empty TO" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Empty TY" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SCH" /><tc Name="Too short SID from hub" Expected="Client sends a STA indicating that the SID is invalid and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a client does when it receives an SID that is too short (less than 4 characters)" Command="SID"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server sends &quot;SID BBB&quot;" /></tc><tc Name="Too long SID from hub" Expected="Client sends a STA indicating that the SID is invalid and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a client does when it receives an SID that is too long (longer than 4 characters)" Command="SID"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server sends &quot;SID BBBBB&quot;" /></tc><tc Name="Invalid characters in SID from hub" Expected="Client sends a STA indicating that the SID is invalid and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a client does when it receives an SID that contain invalid characters (1 for instance)" Command="SID"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server sends &quot;SID BBB1&quot;" /></tc><tc Name="Too short SID from client in INF" Expected="Server sends a STA indicating that the SID is invalid and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a server does when it receives an SID that is too short (less than 4 characters)" Command="SID"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server sends &quot;SID BBBB&quot;" /><step Info="The client sends &quot;INF BBB ...&quot;" /></tc><tc Name="Too long SID from client in INF" Expected="Server sends a STA indicating that the SID is invalid and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a server does when it receives an SID that is too long (longer than 4 characters)" Command="SID"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server sends &quot;SID BBBB&quot;" /><step Info="The client sends &quot;INF BBBBB ...&quot;" /></tc><tc Name="Invalid characters in SID from client" Expected="Server sends a STA indicating that the SID is invalid and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a server does when it receives an SID that contain invalid characters (1 for instance)" Command="SID"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server sends &quot;SID BBBB&quot;" /><step Info="The client sends &quot;INF BBB1 ...&quot;" /></tc><tc Name="Non-assigned SID from client" Expected="Server sends a STA indicating that the SID is invalid and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a server does when it receives an SID that it didn't assign a client." Command="SID"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server sends &quot;SID BBBB&quot;" /><step Info="The client sends &quot;INF CCCC ...&quot;" /></tc><tc Name="Assigned SID from another client" Expected="Server sends a STA indicating that the SID is invalid and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a server does when it receives an SID that was already assigned to another a client." Command="SID"><step Info="Connect with a client A to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server sends &quot;SID BBBB&quot;" /><step Info="Continue with normal communication until NORMAL is reached and stabalized" /><step Info="Connect with a client B to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server sends &quot;SID CCCC&quot;" /><step Info="Client B sends &quot;INF BBBB ...&quot;" /></tc><tc Name="Valid SID assignment" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SID" /><tc Name="Valid SID use" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SID" /><tc Name="No SID from server" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SID" /><tc Name="Invalid BASE version from server" Expected="Client sends a STA indicating lack of support for BASE and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a client does when it receives BAS2 instead of BASE." Command="SUP"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBASE ...&quot;" /><step Info="The server responds with &quot;SUP ADBAS2 ...&quot;" /></tc><tc Name="Invalid BASE version from client" Expected="Server sends a STA indicating lack of support for BASE and disconnects" PostCondition="" PreCondition="" Purpose="Validate what a server does when it receives BAS2 instead of BASE" Command="SUP"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBAS2 ...&quot;" /></tc><tc Name="Lack of overlapping hash support from server" Expected="Client sends a STA indicating no overlapping hash support and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a client does when it does not receive overlapping hashes." Command="SUP"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE&quot;" /></tc><tc Name="Lack of overlapping hash support from client" Expected="Server sends a STA indicating no overlapping hash support and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a server does when it does not receive overlapping hashes." Command="SUP"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBASE&quot;" /></tc><tc Name="Remove BASE support in NORMAL from server" Expected="Client sends a STA indicating lack of support for BASE and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a client does when the BASE support is removed during NORMAL state." Command="SUP"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="Continue with normal communication until NORMAL is reached and stabalized" /><step Info="The server sends &quot;SUP RMBASE&quot;" /></tc><tc Name="Remove BASE support in NORMAL from client" Expected="Server sends a STA indicating lack of support for BASE and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a server does when the BASE support is removed during NORMAL state." Command="SUP"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="Continue with normal communication until NORMAL is reached and stabalized" /><step Info="The client sends &quot;SUP RMBASE&quot;" /></tc><tc Name="Remove hash support in NORMAL from server" Expected="Client sends a STA indicating lack of support for TIGR and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a client does when the hash support is removed during NORMAL state." Command="SUP"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="Continue with normal communication until NORMAL is reached and stabalized" /><step Info="The server sends &quot;SUP RMTIGR&quot;" /></tc><tc Name="Remove hash support in NORMAL from client" Expected="Server sends a STA indicating lack of support for TIGR and disconnects." PostCondition="" PreCondition="" Purpose="Validate what a server does when the hash support is removed during NORMAL state." Command="SUP"><step Info="Connect with a client to the server. Client initiates the connection by sending a &quot;SUP ADBASE ADTIGR&quot;" /><step Info="The server responds with &quot;SUP ADBASE ADTIGR&quot;" /><step Info="Continue with normal communication until NORMAL is reached and stabalized" /><step Info="The client sends &quot;SUP RMTIGR&quot;" /></tc><tc Name="No SUP content from client" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SUP" /><tc Name="No SUP content from server" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SUP" /><tc Name="Valid SUP sequence from server" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SUP" /><tc Name="Valid SUP sequence from client" Expected="" PostCondition="" PreCondition="" Purpose="" Command="SUP" /><tc Name="Server forwards unknown fields" Expected="Server forwards the unknown field" PostCondition="" PreCondition="" Purpose="Validate if the server forwards unknown fields to other clients" Command="General" /><tc Name="Server forwards unknown commands" Expected="The server forwards the unknown command" PostCondition="" PreCondition="" Purpose="Validate that the server forwards the unknwon command" Command="General" /></adctestcases>